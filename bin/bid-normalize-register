#!/usr/bin/env python3

import collections
import csv
import datetime

import click

from schematics.models import Model
from schematics.types import DateType, IntType, StringType


class Row(Model):
    src = StringType()

    name_last = StringType()
    name_first = StringType()
    name_given = StringType()
    name_full = StringType()
    name_lfc = StringType()

    birth_date = DateType()
    team = StringType()
    lg = StringType()
    pos = StringType()
    bats = StringType()
    throws = StringType()
    pro_played_first = IntType()
    pro_played_last = IntType()
    mlb_played_first = IntType()
    mlb_played_last = IntType()

    key_bbref = StringType()
    key_bbref_minors = StringType()
    key_bpro = StringType()
    key_cbs = StringType()
    key_davenport = StringType()
    key_espn = StringType()
    key_fanduel = StringType()
    key_fangraphs = StringType()
    key_fangraphs_minors = StringType()
    key_kbo = StringType()
    key_kffl = StringType()
    key_nfbc = StringType()
    key_npb = StringType()
    key_mlbam = StringType()
    key_retro = StringType()
    key_rotowire = StringType()
    key_yahoo = StringType()


MODEL_FIELDNAMES = list(filter(lambda k: not k.startswith('_'), 
                               collections.OrderedDict(Row())))


@click.group()
def cli():
    pass


@cli.command()
@click.option('-i', 'input_fp', type=click.File('r'), required=True)
@click.argument('output_fp', type=click.File('w'), required=True)
def sfbb(input_fp, output_fp):
    reader = csv.DictReader(input_fp)
    writer = csv.DictWriter(output_fp, MODEL_FIELDNAMES)
    writer.writeheader()

    for row in reader:
        model = Row()
        model.src = 'sfbb'
        model.name_last = row['LASTNAME']
        model.name_first = row['FIRSTNAME']
        model.name_full = row['PLAYERNAME']
        model.name_lfc = row['LASTCOMMAFIRST']

        if row['BIRTHDATE']:
            try:
                dt = datetime.datetime.strptime(row['BIRTHDATE'],
                                                '%m/%d/%Y')
                model.birth_date = datetime.date(dt.year, dt.month, dt.day)
            except ValueError:
                click.echo('Invalid birth date for SFBB {}: {}'
                           .format(row['IDPLAYER'],
                                   row['BIRTHDATE']))

        model.bats = row['BATS']
        model.throws = row['THROWS']
        model.team = row['TEAM']
        model.lg = row['LG']
        model.pos = row['POS']

        fg_id = row['IDFANGRAPHS']
        if fg_id.startswith('sa'):
            model.key_fangraphs_minors = fg_id
        else:
            model.key_fangraphs = fg_id

        model.key_mlbam = row['MLBID']
        model.key_cbs = row['CBSID']
        model.key_retro = row['RETROID']
        model.key_bbref = row['BREFID']
        model.key_nfbc = row['NFBCID']
        model.key_espn = row['ESPNID']
        model.key_kffl = row['KFFLNAME']
        model.key_davenport = row['DAVENPORTID']
        model.key_bpro = row['BPID']
        model.key_yahoo = row['YAHOOID']
        model.key_rotowire = row['ROTOWIREID']
        model.key_fanduel = row['FANDUELID']

        writer.writerow( dict(model) )


@cli.command()
@click.option('-i', 'input_fp', type=click.File('r'), required=True)
@click.argument('output_fp', type=click.File('w'), required=True)
def crunchtime(input_fp, output_fp):
    reader = csv.DictReader(input_fp)
    writer = csv.DictWriter(output_fp, MODEL_FIELDNAMES)
    writer.writeheader()

    for row in reader:
        model = Row()
        model.src = 'ct'
        model.name_full = row['mlb_name']

        model.bats = row['bats']
        model.throws = row['throws']
        model.team = row['mlb_team']

        try:
            mlb_played_first = datetime.datetime.strptime(row['debut'],
                                                          '%m/%d/%Y')
            model.mlb_played_first = datetime.date(mlb_played_first.year,
                                                   mlb_played_first.month,
                                                   mlb_played_first.day)
        except ValueError:
            click.echo('Invalid debut date for Crunchtime {}: {}'
                       .format(model.name_full,
                               row['debut']))

        # combine positions from each source, remove empty
        positions = (row['espn_pos'], row['cbs_pos'], row['mlb_pos'],
                     row['nfbc_pos'], row['yahoo_pos'])
        model.pos = ','.join(set(filter(lambda p: p.strip(), positions)))

        model.key_mlbam = row['mlb_id']
        model.key_bpro = row['bp_id']
        model.key_bbref = row['bref_id']
        model.key_cbs = row['cbs_id']
        model.key_espn = row['espn_id']
        model.key_nfbc = row['nfbc_id']
        model.key_retro = row['retro_id']
        model.yahoo_id = row['yahoo_id']

        fg_id = row['fg_id']
        if fg_id.startswith('sa'):
            model.key_fangraphs_minors = fg_id
        else:
            model.key_fangraphs = fg_id

        writer.writerow( dict(model) )


@cli.command()
@click.option('-i', 'input_fp', type=click.File('r'), required=True)
@click.argument('output_fp', type=click.File('w'), required=True)
def chadwick(input_fp, output_fp):
    reader = csv.DictReader(input_fp)
    writer = csv.DictWriter(output_fp, MODEL_FIELDNAMES)
    writer.writeheader()

    for row in reader:
        model = Row()
        model.src = 'cw'
        model.name_last = row['name_last']
        model.name_first = row['name_first']
        model.name_given = row['name_given']
        model.name_full = '{} {}'.format(model.name_first, model.name_last)
        model.name_lfc = '{}, {}'.format(model.name_last, model.name_first)

        if all((row['birth_year'], row['birth_month'], row['birth_day'])):
            try:
                model.birth_date = datetime.date(int(row['birth_year']),
                                                 int(row['birth_month']),
                                                 int(row['birth_day']))
            except ValueError:
                bad_date = '{}-{}-{}'.format(row['birth_year'],
                                             row['birth_month'],
                                             row['birth_day'])
                msg = ('Invalid birth date for Chadwick {}: {}'
                       .format(row['key_uuid'],
                               bad_date))
                click.echo(msg)

        model.pro_played_first = row.get('pro_played_first')
        model.pro_played_last = row.get('pro_played_last')
        model.mlb_played_first = row.get('mlb_played_first')
        model.mlb_played_last = row.get('mlb_played_last')

        model.bats = row.get('bats')
        model.throws = row.get('throws')

        key_fields = filter(lambda k: k.startswith('key_'), MODEL_FIELDNAMES)
        for key in key_fields:
            setattr(model, key, row.get(key))

        writer.writerow( model )


if __name__ == '__main__':
    cli()
